void reduzirCores(Mat &imagem)
{
	Mat amostras(imagem.rows * imagem.cols, 3, CV_32F);
	
	for(int y = 0; y < imagem.rows; y++)
	{
		for( int x = 0; x < imagem.cols; x++)
		{
			for( int z = 0; z < 3; z++)
			{
				amostras.at<float>(y + x*imagem.rows, z) = imagem.at<Vec3b>(y,x)[z];
			}
		}
	}
	
	Mat rotulos, centros;
	kmeans(amostras, NUM_CLUSTERS, rotulos, TermCriteria(CV_TERMCRIT_ITER|CV_TERMCRIT_EPS, KMEANS_MAX_ITER, KMEANS_MAX_ERRO), TENTATIVAS, KMEANS_PP_CENTERS, centros);

	//Mat saida(imagem.size(), imagem.type());
	for( int y = 0; y < imagem.rows; y++ )
	{
		for( int x = 0; x < imagem.cols; x++ )
		{ 
			int cluster_idx = rotulos.at<int>(y + x*imagem.rows,0);
			imagem.at<Vec3b>(y,x)[0] = centros.at<float>(cluster_idx, 0);
			imagem.at<Vec3b>(y,x)[1] = centros.at<float>(cluster_idx, 1);
			imagem.at<Vec3b>(y,x)[2] = centros.at<float>(cluster_idx, 2);
		}
	}
	imshow( "clustered image", imagem);
	waitKey( 0 );

	
}
